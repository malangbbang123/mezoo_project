from reverse_detection import *
from READ_MAT import *
import glob
import os
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
import pandas as pd
import re
from scipy.signal import find_peaks

# 데이터 목록
data_list = [
    "A00109_20221020_0204", "A00224_20230508_1703", "A00193_20220620_1306",
    "A00202_20230710_1448", "A00202_20230705_1540", "A00933_20230511_1516",
    "A00224_20230306_1931", "A00208_20230626_1630", "A00933_20230814_1651",
    "A00202_20230627_1510", "A00202_20230629_1653", "A00208_20230627_1550",
    "A00933_20230512_1527", "A00933_20230330_1514", "A00933_20230509_1547",
    "A00933_20230522_1658", "A00933_20230710_1517", "A00208_20230628_1501",
    "A00201_20230531_1525", "A00224_20230515_1613", "A00224_20230424_1449",
    "A00224_20230510_1620", "A00224_20230309_1626", "A00202_20230316_0900",
    "A00933_20230717_1545", "A00202_20230703_1438", "A00933_20230425_1539",
    "A00202_20230719_1702", "A00933_20230518_1502", "A00933_20230515_1606",
    "A00224_20230825_1513", "A00208_20230525_1710", "A00224_20230719_1650",
    "A00933_20230726_1728", "A00201_20230515_1715", "A00201_20230607_1530",
    "A00202_20230519_1458", "A00110_20230420_1025", "A00110_20230425_0906",
    "A00112_20230425_1110", "A00109_20230608_1309", "A00110_20230607_1300",
    "A00109_20230424_1013", "A00114_20230425_1000", "A00111_20230426_1121",
    "A00119_20230424_1144", "A00116_20230418_0950", "A00117_20230417_1113",
    "A00109_20230426_0928", "A00117_20230605_1012", "A00111_20230608_1003",
    "A00111_20230419_1203", "A00113_20230424_1055", "A00109_20230419_1306",
    "A00112_20230420_1128", "A00112_20230418_1416", "A00110_20230427_0958",
    "A00111_20230424_1226", "A00214_20220826_1004", "A00214_20220915_1156",
    "A00215_20220719_1310", "A00217_20220926_1455", "A00202_20220819_1032",
    "A00206_20220703_1037", "A00934_20220809_1322", "A00210_20220719_1230",
    "A00208_20220722_1016", "A00214_20220530_1552", "A00217_20220614_1202",
    "A00225_20220715_1018", "A00215_20220607_1040", "A00193_20230426_1133",
    "A00120_20230427_1125", "A00195_20230417_1205", "A00194_20230418_1023",
    "A00118_20230425_1035", "A00194_20230420_1022", "A00119_20230417_0931",
    "A00197_20230424_1313", "A00120_20230607_1039", "A00115_20230417_1016",
    "A00120_20230418_0859", "A00115_20230424_0951", "A00196_20230420_1129",
    "A00118_20230427_1026", "A00120_20230425_1132", "A00117_20230424_1034",
    "A00119_20230426_1126", "A00118_20230418_1055", "A00196_20230425_1034",
    "A00116_20230427_0914", "A00117_20230426_1012", "A00113_20230419_1000",
    "A00117_20230606_1409", "A00193_20220622_1403", "A00115_20220623_0732",
    "A00109_20220621_0715", "A00109_20220620_1740", "A00113_20220622_1012",
    "A00113_20220620_1112", "A00116_20220622_0918", "A00115_20220622_1123",
    "A00111_20220620_1112", "A00198_20220622_0227", "A00194_20220621_1410",
    "A00112_20220623_0943", "A00200_20230425_1334", "A00117_20230608_1059",
    "A00110_20230418_1310", "A00116_20221014_2038", "A00110_20221015_1620",
    "A00120_20221012_1906", "A00113_20221031_1828", "A00116_20221018_1800",
    "A00116_20221103_1950", "A00116_20221012_2305", "A00119_20221103_0038",
    "A00117_20221011_1921", "A00118_20221012_1836", "A00196_20221014_0202",
    "A00194_20221014_1949", "A00120_20221103_2246", "A00118_20221101_0035",
    "A00117_20221017_1717", "A00113_20221020_1838", "A00114_20221103_1831",
    "A00115_20221013_2324", "A00109_20221020_1728", "A00117_20221101_2057",
    "A00118_20221020_1730", "A00117_20221103_1917", "A00115_20221031_2027",
    "A00109_20221011_1814", "A00114_20221019_1843", "A00120_20221014_1953",
    "A00200_20230427_1306", "A00195_20230608_1219", "A00117_20230419_1030",
    "A00198_20230425_1309", "A00197_20230426_1244", "A00199_20230424_1419",
    "A00115_20230419_0936", "A00196_20230427_1023", "A00196_20230418_1205",
    "A00201_20230609_1538", "A00115_20230426_0902", "A00195_20230426_1702",
    "A00198_20230427_1234", "A00196_20230607_1136", "A00113_20221013_1812",
    "A00114_20221014_1815", "A00110_20221012_2207", "A00112_20221014_2007",
    "A00111_20221019_1757", "A00109_20221012_0306", "A00112_20221101_1956"
]

# Reverse 레이블 목록
reverse_list = [
    "A00119_20220901_1145", "A00193_20221031_1901", "A00113_20220620_1112",
    "A00116_20220624_1336", "A00112_20220623_0943", "A00116_20221018_1800",
    "A00117_20221017_1717", "A00109_20221020_1728", "A00118_20221018_1733",
    "A00109_20221101_0028", "A00109_20221020_0204", "A00110_20221101_1710",
    "A00110_20221018_2036", "A00109_20221018_0147", "A00201_20220713_0904",
    "A00194_20221015_0255", "A00193_20221014_0357", "A00194_20221101_2040",
    "A00109_20221031_1705", "A00120_20220829_1242", "A00111_20220901_1028",
    "A00194_20221013_0130"
]

def process_file(file_path, idx):
    """
    주어진 파일을 처리하여 신호 세그먼트, 레이블, ID를 반환합니다.
    
    Args:
        file_path (str): 파일 경로
        idx (int): 파일 인덱스
        
    Returns:
        tuple: 신호 세그먼트 리스트, 레이블 리스트, ID 리스트
    """
    x = []  # Raw signal segments
    y = []  # Reverse label
    z = []  # Patient ID
    reverse = 0
    id = re.sub(".mat", "", os.path.basename(file_path))
    
    try:
        # .mat 파일 로드
        file = load_mat(file_path)
        data = read_ecg(file)
        
        if id in data_list:
            if id in reverse_list:
                reverse = 1  # Reverse 레이블 설정
            data = data[file['data_lost'] == False]  # 손실되지 않은 데이터만 사용
            sr = read_sr(file)
            split_5 = len(data) // 5
            segment = int(sr * (60 * 10))  # 10분 길이의 세그먼트
            
            for split_idx in range(0, len(data), split_5):
                if split_idx + segment > len(data):
                    break
                    
                temp_data = data[split_idx:(split_idx + segment)]
                filtered_segment = median_filter(temp_data)
                x.append(filtered_segment)
                y.append(reverse)
                z.append(id)

    except Exception as e:
        print(e)
        pass

    return x, y, z

if __name__ == "__main__":
    path = "/Users/aimmo-aip-0168/Desktop/code/external_data"
    mat_data = glob.glob(os.path.join(path, "**", "*.mat"), recursive=True)
    X = []  # 신호 데이터 리스트
    Y = []  # 레이블 리스트
    Z = []  # ID 리스트
    max_len = 0


    # 파일 처리 
    for idx, file_path in tqdm(enumerate(mat_data), total=len(mat_data)):
        try:
            x, y, z = process_file(file_path, idx)
            if z:
                X.extend(x)
                Y.extend(y)
                Z.extend(z)
        except Exception as e:
            print(e)
            pass
    
    X = np.array(X)
    Y = np.array(Y)
    Z = np.array(Z)
    np.savez(f"/Volumes/Seagate/hicardi/code_check/segment_ver.npz", x=X, y=Y, z=Z)
